# RSPi status
# https://www.home-assistant.io/integrations/systemmonitor/
- platform: systemmonitor
  resources:
    - type: last_boot
    - type: processor_use
    - type: memory_use_percent
    - type: memory_use
    - type: disk_use_percent
      arg: /
    - type: disk_use_percent
      arg: /var/log
    - type: network_in
      arg: eth0
    - type: network_out
      arg: eth0
    - type: throughput_network_in
      arg: eth0
    - type: throughput_network_out
      arg: eth0
    - type: packets_in
      arg: eth0
    - type: packets_out
      arg: eth0

- platform: template
  sensors:
    uptime:
      friendly_name: Uptime
      icon_template: mdi:clock-outline
      unit_of_measurement: days
      value_template: >-
        {% set last_boot = as_timestamp(states('sensor.last_boot')) %}
        {% set now = as_timestamp(now()) %}
        {{ ((now - last_boot) / 86400) | round(0) }}
    cert_expiry_timestamp_custom:
      friendly_name: Cert Expiry Timestamp Custom
      icon_template: 'mdi:certificate'
      value_template: "{{ as_timestamp(states('sensor.cert_expiry_timestamp')) | timestamp_custom('%a %b %d') }}"

- platform: command_line
  name: CPU Temperature
  command: "cat /sys/class/thermal/thermal_zone0/temp"
  unit_of_measurement: "°C"
  value_template: '{{ value | multiply(0.001) | round(1) }}'

- platform: command_line
  name: Raspbian packages
  scan_interval: 900
  command: "/usr/lib/nagios/plugins/check_apt | sed -n 's/.*upgrades=\\([^;]*\\);.*/\\1/p'"
  unit_of_measurement: "pending update(s)"

# HA
- platform: version
  name: Current
  source: local

- platform: version
  name: Latest
  source: pypi

- platform: cert_expiry
  host: !secret host

# eWeLink Sonoff TH16
- platform: template
  sensors:
    dormitorio_temperatura:
      friendly_name: Temperatura dormitorio
      device_class: temperature
      unit_of_measurement: '°C'
      value_template: "{{ state_attr('light.sonoff_10008504ad', 'temperature') | round(1) }}"
    dormitorio_humedad:
      friendly_name: Humedad dormitorio
      device_class: humidity
      unit_of_measurement: '%'
      value_template: "{{ state_attr('light.sonoff_10008504ad', 'humidity') }}"
    cocina_temperatura:
      friendly_name: Temperatura cocina
      device_class: temperature
      unit_of_measurement: '°C'
      value_template: "{{ state_attr('switch.sonoff_100085067c', 'temperature') | round(1) }}"
    cocina_humedad:
      friendly_name: Humedad cocina
      device_class: humidity
      unit_of_measurement: '%'
      value_template: "{{ state_attr('switch.sonoff_100085067c', 'humidity') }}"
    termotanque_temperatura:
      friendly_name: Temperatura termotanque
      device_class: temperature
      unit_of_measurement: '°C'
      value_template: "{{ state_attr('switch.sonoff_10008508fb', 'temperature') | round(1) }}"
    termotanque_humedad:
      friendly_name: Humedad termotanque
      device_class: humidity
      unit_of_measurement: '%'
      value_template: "{{ state_attr('switch.sonoff_10008508fb', 'humidity') }}"
    deposito_temperatura:
      friendly_name: Temperatura deposito
      device_class: temperature
      unit_of_measurement: '°C'
      value_template: "{{ state_attr('switch.sonoff_100085069c', 'temperature') | round(1) }}"
    deposito_humedad:
      friendly_name: Humedad deposito
      device_class: humidity
      unit_of_measurement: '%'
      value_template: "{{ state_attr('switch.sonoff_100085069c', 'humidity') }}"

# PiHole
# https://github.com/pi-hole/AdminLTE/blob/master/api.php
- platform: rest
  name: PiHole status
  resource: "http://127.0.0.1:8080/admin/api.php?status"
  scan_interval: 3
  value_template: >
    {{ value_json.status | capitalize }}

- platform: rest
  name: PiHole versions
  resource: "http://127.0.0.1:8080/admin/api.php?versions"
  json_attributes:
    - core_branch
    - core_current
    - core_latest
    - core_update
    - web_branch
    - web_current
    - web_latest
    - web_update
    - FTL_branch
    - FTL_current
    - FTL_latest
    - FTL_update
  value_template: "OK"
  scan_interval: 3600
- platform: template
  sensors:
    pihole_core_current:
      value_template: "{{ state_attr('sensor.pihole_versions', 'core_current') | replace('v','') }}"
    pihole_core_latest:
      value_template: "{{ state_attr('sensor.pihole_versions', 'core_latest') | replace('v','') }}"
    pihole_web_current:
      value_template: "{{ state_attr('sensor.pihole_versions', 'web_current') | replace('v','') }}"
    pihole_web_latest:
      value_template: "{{ state_attr('sensor.pihole_versions', 'web_latest') | replace('v','') }}"
    pihole_ftl_current:
      value_template: "{{ state_attr('sensor.pihole_versions', 'FTL_current') | replace('v','') }}"
    pihole_ftl_latest:
      value_template: "{{ state_attr('sensor.pihole_versions', 'FTL_latest') | replace('v','') }}"

# Github
- platform: github
  access_token: !secret hacs_token
  repositories:
    - path: 'RetroPie/RetroPie-Setup'

- platform: template
  sensors:
    retropie_setup_latest:
      friendly_name: RetroPie
      value_template: "{{ state_attr('sensor.retropie_setup', 'latest_release_tag') }}"

# Tokens as sensor
- platform: template
  sensors:
    living_rm2_ip:
      value_template: !secret living_rm2_ip
    dormitorio_rm2_ip:
      value_template: !secret dormitorio_rm2_ip

# Date
- platform: moon

- platform: template
  sensors:
    sun_elevation:
      friendly_name: Sun elevation
      unit_of_measurement: "deg"
      icon_template: mdi:white-balance-sunny
      value_template: "{{ state_attr('sun.sun', 'elevation') }}"
    sun_elevation_wo_neg:
      friendly_name: Sun
      unit_of_measurement: "deg"
      value_template: >-
        {% set sun_elevation = state_attr('sun.sun', 'elevation') %}
        {% if sun_elevation >= 1 %}
          {{ sun_elevation }}
        {% else %}
          0
        {% endif %}

- platform: rest
  name: Astronomy API
  resource_template: "https://api.ipgeolocation.io/astronomy?apiKey={{ states('input_text.ipgeolocation_token') }}&lat={{ states('input_text.latitude') }}&long={{ states('input_text.longitude') }}"
  json_attributes:
    - sunrise
    - sunset
    - solar_noon
    - day_length
    - moonrise
    - moonset
    - moon_altitude
  value_template: "OK"
  scan_interval: 90
- platform: template
  sensors:
    sun_status:
      friendly_name: Sun status
      icon_template: mdi:weather-sunny
      value_template: "OK"
      attribute_templates:
        sunrise: "{{ state_attr('sensor.astronomy_api', 'sunrise') }}"
        noon: "{{ state_attr('sensor.astronomy_api', 'solar_noon') }}"
        sunset: "{{ state_attr('sensor.astronomy_api', 'sunset') }}"
    day_length:
      friendly_name: Day length
      unit_of_measurement: "hours"
      icon_template: mdi:weather-sunny
      value_template: "{{ state_attr('sensor.astronomy_api', 'day_length') }}"
    moonrise:
      friendly_name: Moonrise
      value_template: "{{ state_attr('sensor.astronomy_api', 'moonrise') }}"
    moonset:
      friendly_name: Moonset
      value_template: "{{ state_attr('sensor.astronomy_api', 'moonset') }}"
    moon_status:
      friendly_name: Moon status
      icon_template: mdi:moon-waning-crescent
      value_template: "OK"
      attribute_templates:
        moonrise: "{{ state_attr('sensor.astronomy_api', 'moonrise') }}"
        moonset: "{{ state_attr('sensor.astronomy_api', 'moonset') }}"
    moon_elevation:
      friendly_name: Moon elevation
      unit_of_measurement: "deg"
      icon_template: mdi:moon-waning-crescent
      value_template: "{{ state_attr('sensor.astronomy_api', 'moon_altitude') | round(2) }}"
    moon_elevation_wo_neg:
      friendly_name: Moon
      unit_of_measurement: "deg"
      value_template: >-
        {% set moon_elevation = state_attr('sensor.astronomy_api', 'moon_altitude') | round(2) %}
        {% if moon_elevation >= 1 %}
          {{ moon_elevation }}
        {% else %}
          0
        {% endif %}

# UTC to localtime
- platform: template
  sensors:
    local_alot_hashachar:
      friendly_name: Alot Hashachar
      icon_template: mdi:weather-sunset-up
      value_template: "{{ as_timestamp(states('sensor.jewish_calendar_alot_hashachar')) | timestamp_custom('%H:%M') }}"
    local_latest_shema:
      friendly_name: Latest time for Shema (MG"A)
      icon_template: mdi:calendar-clock
      value_template: "{{ as_timestamp(states('sensor.jewish_calendar_latest_time_for_shma_mg_a')) | timestamp_custom('%H:%M') }}"
    local_latest_shacharit:
      friendly_name: Latest time for Shacharit (MG"A)
      icon_template: mdi:calendar-clock
      value_template: "{{ as_timestamp(states('sensor.jewish_calendar_latest_time_for_tefilla_mg_a')) | timestamp_custom('%H:%M') }}"
    local_mincha_gedola:
      friendly_name: Mincha Gedola
      icon_template: mdi:calendar-clock
      value_template: "{{ as_timestamp(states('sensor.jewish_calendar_mincha_gedola')) | timestamp_custom('%H:%M') }}"
    local_mincha_ketana:
      friendly_name: Mincha Ketana
      icon_template: mdi:calendar-clock
      value_template: "{{ as_timestamp(states('sensor.jewish_calendar_mincha_ketana')) | timestamp_custom('%H:%M') }}"
    local_plag_hamincha:
      friendly_name: Plag Hamincha
      icon_template: mdi:weather-sunset-down
      value_template: "{{ as_timestamp(states('sensor.jewish_calendar_plag_hamincha')) | timestamp_custom('%H:%M') }}"
    local_upcoming_candle_lighting:
      friendly_name: Upcoming Candle Lighting
      icon_template: mdi:candle
      value_template: "{{ as_timestamp(states('sensor.jewish_calendar_upcoming_candle_lighting')) | timestamp_custom('%a %d, %H:%M') }}"
    local_tzeit_hakochavim:
      friendly_name: Tzeit Hakochavim (Three stars)
      icon_template: mdi:weather-night
      value_template: "{{ as_timestamp(states('sensor.jewish_calendar_t_set_hakochavim')) | timestamp_custom('%H:%M') }}"
    local_upcoming_havdalah:
      friendly_name: Upcoming Havdalah
      icon_template: mdi:weather-night
      value_template: "{{ as_timestamp(states('sensor.jewish_calendar_upcoming_havdalah')) | timestamp_custom('%a %d, %H:%M') }}"
    kiddush_levanah:
      friendly_name: Kiddush Levanah
      icon_template: >-
        {% if is_state('sensor.moon', 'waxing_gibbous') or  is_state('sensor.moon', 'full_moon') %}
          mdi:eye-outline
        {% else %}
          mdi:eye-off-outline
        {% endif %}
      value_template: >-
        {% if is_state('sensor.moon', 'waxing_gibbous') or  is_state('sensor.moon', 'full_moon') %}
          Yes
        {% else %}
          Not yet
        {% endif %}

# Weather
- platform: template
  sensors:
    rel_pressure:
      friendly_name: Relative pressure
      unit_of_measurement: hPa
      device_class: pressure
      value_template: >-
        {% set val = float(states('sensor.lu7and_rel_pressure')) %}
        {{ (val / 0.029529983071445) | round(2) }}
    daily_rain:
      friendly_name: Daily rain
      icon_template: mdi:weather-rainy
      unit_of_measurement: mm
      value_template: >-
        {% set val = float(states('sensor.lu7and_daily_rain')) %}
        {{ (val * 25.4)  | round(2) }}
    wind_speed:
      friendly_name: Wind speed
      icon_template: mdi:weather-windy
      unit_of_measurement: "km/h"
      value_template: "{{ (states('sensor.lu7and_wind_speed') | float * 1.609) | round(2) }}"
    wind_gust:
      friendly_name: Wind gust
      icon_template: mdi:weather-windy
      unit_of_measurement: "km/h"
      value_template: "{{ (states('sensor.lu7and_wind_gust') | float * 1.609) | round(2) }}"
    wind_dir:
      friendly_name: Wind direction
      icon_template: >-
        {% set direction = ['up', 'top-right', 'right', 'botton-right', 'down', 'botton-left', 'left', 'top-left' ] %}
        {% set deg = float(states('sensor.lu7and_wind_dir')) %}
        {% set div = 45 %}
        {% for i in range(0, 8) %}
          {% if deg >= (div * i) and deg <= (div * ( i + 1 ) - 0.1) %}
            mdi:arrow-{{ direction[i] }}
          {% endif %}
        {% endfor %}
      value_template: >-
        {% set cardinal = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'] %}
        {% set deg = float(states('sensor.lu7and_wind_dir')) %}
        {% set div = 22.5 %}
        {% for i in range(0, 16) %}
          {% if deg >= (div * i) and deg <= (div * ( i + 1 ) - 0.1) %}
            {{ cardinal[i] }}
          {% endif %}
        {% endfor %}
